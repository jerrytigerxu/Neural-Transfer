# -*- coding: utf-8 -*-
"""Neural Transfer Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EGsEUUBL_zEkXicSu634gpgiH2Yr-lo1
"""

from google.colab import files

files.upload()

! pip install numpy scipy pillow 
! pip install Pillow==2.6.0

from google.colab import drive
drive.mount('./gdrive')

!ls

os.chdir('./gdrive/My Drive/Google Colaboratory/Colab Notebooks')

!ls

os.chdir('./Data Science   Machine Learning')

os.chdir('./Neural Transfer Project')

!ls

import PIL.Image
from keras.preprocessing.image import load_img, img_to_array
import numpy as np
from scipy.optimize import fmin_l_bfgs_b
from keras.applications import vgg19
from keras import backend as K
from PIL import Image
from keras.preprocessing.image import save_img
import os

# Declaring variables

base_image_path = './better silly.jpg'
style_reference_image_path = './better thought.jpg'
iterations = 20

# Weights to compute the final loss

total_variation_weight = 1
style_weight = 3
content_weight = 5

# Dimensions of the generated picture.

width, height = load_img(base_image_path).size
resized_width = 400
resized_height = int(width * resized_width / height)

# Preprocessing image to make it compatible with the VGG19 model

def preprocess_image(image_path):
  img = load_img(image_path, target_size=(resized_width, resized_height))
  img = img_to_array(img)
  img = np.expand_dims(img, axis=0)
  img = vgg19.preprocess_input(img)
  return img

# Function to convert a tensor into an image

def deprocess_image(x):
  x = x.reshape((resized_width, resized_height, 3))
  
  x[:, :, 0] += 103.939
  x[:, :, 1] += 116.779
  x[:, :, 2] += 123.68
  
  x = x[:, :, ::-1]
  x = np.clip(x, 0, 255).astype('uint8')
  return x

# Creating a gram matrix

def gram_matrix(x):
  features = K.batch_flatten(K.permute_dimensions(x, (2, 0, 1)))
  gram = K.dot(features, K.transpose(features))
  return gram

# Style_loss_per_layer

def style_loss_per_layer(style, combination):
  S = gram_matrix(style)
  C = gram_matrix(combination)
  channels = 3
  size = resized_width * resized_height
  return K.sum(K.square(S - C)) / (4. * (channels ** 2) * (size ** 2))

# Total_style_loss

def total_style_loss(feature_layers):
  loss = K.variable(0.)
  for layer_name in feature_layers:
    layer_features = outputs_dict[layer_name]
    style_reference_features = layer_features[1, :, :, :]
    combination_features = layer_features[2, :, :, :]
    s1 = style_loss_per_layer(style_reference_features, combination_features)
    loss += (style_weight / len(feature_layers)) * s1
  return loss

# content_loss

def content_loss(layer_features):
  base_image_features = layer_features[0, :, :, :]
  combination_features = layer_features[2, :, :, :]
  return K.sum(K.square(combination_features - base_image_features))

# total_variation_loss

def total_variation_loss(x):
  a = K.square(x[:, :resized_width - 1, :resized_height - 1, :] - x[:, 1:, :resized_height - 1, :])
  b = K.square(x[:, :resized_width - 1, :resized_height - 1, :] - x[:, :resized_width - 1, 1:, :])
  return K.sum(K.pow(a + b, 1.25))

# total_loss

def total_loss():
  loss = K.variable(0.)
  
  # contribution of content loss
  feature_layers_content = outputs_dict['block5_conv2']
  loss += content_weight * content_loss(feature_layers_content)
  
  # contribution of style loss
  feature_layers_style = ['block1_conv1', 'block2_conv1',
                         'block3_conv1', 'block4_conv1',
                         'block5_conv1']
  loss += total_style_loss(feature_layers_style) * style_weight
  
  # contribution of variation loss
  
  loss += total_variation_weight * total_variation_loss(combination_image)
  return loss

def eval_loss_and_grads(x):
  x = x.reshape((1, resized_width, resized_height, 3))
  outs = f_outputs([x])
  loss_value = outs[0]
  if len(outs[1:]) == 1:
    grad_values = outs[1].flatten().astype('float64')
  else:
    grad_values = np.array(outs[1:]).flatten().astype('float64')
  return loss_value, grad_values

def save(filename, generated):
  save_img(filename, generated)

# Get tensor representations of our images

base_image = K.variable(preprocess_image(base_image_path))
style_reference_image = K.variable(preprocess_image(style_reference_image_path))

# Placeholder for generated image
combination_image = K.placeholder((1, resized_width, resized_height, 3))

# Combine the 3 images into a single Keras tensor

input_tensor = K.concatenate([base_image,
                             style_reference_image,  
                             combination_image], axis=0)

# Build the VGG19 network with our 3 images as input
# the model is loaded with pre-trained ImageNet weights

model = vgg19.VGG19(input_tensor=input_tensor,
                   weights='imagenet', include_top=False)

# Get the outputs of each key layer, through unique names

outputs_dict = dict([(layer.name, layer.output) for layer in model.layers])

# Get the gradients of the generated image
loss = total_loss()
grads = K.gradients(loss, combination_image)
outputs = [loss]
outputs += grads

f_outputs = K.function([combination_image], outputs)

# Creating evaluator object

class Evaluator(object):
  
  def __init__(self):
    self.loss_value = None
    self.grad_values = None
    
  def loss(self, x):
    assert self.loss_value is None
    loss_value, grad_values = eval_loss_and_grads(x)
    self.loss_value = loss_value
    self.grad_values = grad_values
    return self.loss_value
  
  def grads(self, x):
    assert self.loss_value is not None
    grad_values = np.copy(self.grad_values)
    self.loss_value = None
    self.grad_values = None
    return grad_values

evaluator = Evaluator()

x = preprocess_image(base_image_path)

# The optimizer is fmin_l_bfgs

for i in range(iterations):
  print('Iteration: ' , i)
  x, min_val, info = fmin_l_bfgs_b(evaluator.loss,
                                  x.flatten(),
                                  fprime=evaluator.grads,
                                  maxfun=25)
  print('Current loss value:', min_val)
  
  # Save current generated image
  img = deprocess_image(x.copy())
  fname = './images/' + np.str(i) + '.png'
  save(fname, img)

